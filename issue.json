[
  {
    "type":"TASK",
    "code":"MARKET-1",
    "summary":[
      "STEP_1: Реализовать удаление операций при удалении аккаунта"
    ]
  },
  {
    "type":"TASK",
    "code":"MARKET-2",
    "summary":[
      "STEP_1: Реализовать разделение между пользовательскими данными и учетными данными"
    ]
  },
  {
    "type":"TASK",
    "code":"MARKET-3",
    "summary":[
      "STEP_1: Реализовать получения токена аутентификации для предотвращения csrf атак"
    ]
  },
  {
    "type":"TASK",
    "code":"MARKET-4",
    "summary":[
      "STEP_1: Реализовать функционал веремнной блокировки пользователя при частом вводе неправильного пароля"
    ]
  },
  {
    "type":"TASK",
    "code":"MARKET-5",
    "summary":[
      "STEP_1: Добавить дату создания аккаунта, реализовать валидацию дат операции, реализовать поиск операций по фильтру"
    ]
  },
  {
    "type":"TASK",
    "code":"MARKET-6",
    "summary":[
      "STEP_1: Хранение числа попыток ввода пароля в сессии недопустимо,",
      "поскольку после инвалидации сессии число попыток ввода пароля обнулится,",
      "требуется хранить данную переменную в базе"
    ]
  },
  {
    "type":"TASK",
    "code":"MARKET-8",
    "summary":[
      "STEP_1: Реализовать единую доменную модель по денежным счетам"
    ]
  },
  {
    "type":"TASK",
    "code":"MARKET-9",
    "summary":[
      "STEP_1: Реализовать затраты и лимиты по затратам"
    ]
  },
  {
    "type":"TASK",
    "code":"MARKET-10",
    "summary":[
      "STEP_1: Реализовать cli утилиту в качестве клиентского приложения"
    ]
  },
  {
    "type":"TASK",
    "code":"MARKET-11",
    "summary":[
      "STEP_1: Покрыть тестами domain модуль"
    ]
  },
  {
    "type":"BAG",
    "code":"MARKET-12",
    "summary":[
      "STEP_1: Исправить баг в клиентском модули связанный с сервисом операций"
    ]
  },
  {
    "type":"TASK",
    "code":"MARKET-14",
    "summary":[
      "STEP_1: Произвести рефактор PropertyLoader.",
      "STEP_2: Произвести преобразование печати в UTF-8."
    ]
  },
  {
    "type":"TASK",
    "code":"MARKET-15",
    "summary":[
      "STEP_1: Реализовать exception handler controller. Доработать клиентский модуль с возможностью обработки ErrorDTO.",
      "STEP_2: Реализовать чтение properties по заданному пути через vm options.",
      "STEP_3: Добавить логирование."
    ]
  },
  {
    "type":"TASK",
    "code":"MARKET-16",
    "summary":[
      "STEP_1: Добавить метод получения всех затрат по лимиту по всем дата.",
      "STEP_2: Доработать cli утилиту на новую команду получения всех затрат.",
      "STEP_3: Доработать модуль client, добавить интерфейс получения параметров соединения."
    ]
  },
  {
    "type":"TASK",
    "code":"MARKET-17",
    "summary":[
      "STEP_1: Доработать cli приложение. Обеспечить скрытие ввода пароля при аутентификации.",
      "STEP_2: Исправить валидацию по времени операций.",
      "STEP_3: Поправить баг получения всех id затрат по списку id лимитов, когда данный список пуст.",
      "STEP_4: Добавить логирование клиентского модуля и cli утилиты.",
      "STEP_5: Добавить обработчик на контроллере для OperationExecuteException",
      "STEP_6: Поправлено считывание данных в символьный поток"
    ]
  },
  {
    "type":"TASK",
    "code":"MARKET-18",
    "summary": [
      "STEP_1: Реализовать новое инерактивное меню в cli утилите.",
      "Необходимо реализовать так чтобы пользователь заходил в раздел и продолжал работать в рамках раздела используя данные",
      "предыдущего шага. Например заходим в управление счетами, далее выбираем счет, далее все операции для выбранного счета",
      "STEP_2: Добавить проверки на принадлежности идентификатора вводимым пользователем по денежным счетам, лимитам, затратам.",
      "STEP_3: Добавить сортировку операций по убыванию.",
      "STEP_4: Добавить скрипты создания и удаления таблиц"
    ]
  }
]